// Code generated by go-bindata.
// sources:
// docs/usage.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4d\x4f\xdb\x40\x10\x3d\x67\x7f\xc5\x1c\x7a\x68\x45\x63\x54\xa0\xad\xea\x5b\x08\x69\x14\x91\x40\x94\x80\x50\x4f\x68\x63\x8f\xe3\x15\xeb\x5d\x33\xbb\x8b\x71\x7f\x7d\x67\xed\x04\x82\x54\x95\xde\xfc\xf1\xde\x9b\x37\x6f\x66\x46\x30\x9e\xcf\xa0\xb0\x04\x95\x34\x72\xab\xcc\x16\x1c\x66\x84\xde\x25\x42\xac\xfb\x27\x90\x84\x80\x26\xa3\xb6\xf6\x98\x43\xa3\x7c\x09\xd2\x00\xd6\x25\x56\x48\x52\xc3\x03\xb6\x3d\x9d\xff\x6e\x5a\xb8\x5c\xac\x13\xb8\x29\x51\x64\x8a\x21\xe4\xf1\x79\xa7\xe1\xbc\x25\x86\x28\x03\x12\xb4\xcd\x98\xf9\x6b\xb4\x98\x43\xa1\x34\x72\xb5\x1b\xdb\x03\xa0\xb5\x81\xf8\x23\x39\xbf\xf3\x92\x0a\x31\xf8\xb0\xf7\x05\xc3\x02\x0a\xb2\xc6\xa3\xc9\x93\xb6\xd2\x30\x7c\x60\x71\x93\xca\xc6\xa5\x0f\x95\x4b\x83\x1b\x36\xe8\x7c\x92\x24\x29\xfb\x3a\x3e\x39\x2b\xf8\x11\x1a\x52\x1e\x21\xdf\xdc\x07\x87\x64\x64\x85\x50\x07\xaf\x4c\xd4\xcd\xa4\x7f\x23\x28\x06\x07\xb0\x54\x0c\x06\x2c\x73\xaf\xf2\xf4\xfd\x2a\x3b\xec\x6b\xdb\x29\x8c\xd5\xf9\x0f\x3a\xbd\x3d\x22\x7a\x9a\x9c\x5f\xce\x8f\xbf\xa3\xea\x81\x52\x6f\x2d\x7b\x2a\xab\x74\xd7\xd8\xc6\x3e\xf3\xe7\x43\x2e\x96\xcb\xdf\x93\xdb\x85\x5b\xad\x96\x47\x91\x24\xae\x6b\xaf\xac\x91\x5a\xb7\x60\x2b\xe5\xc1\x97\xd8\x65\xdf\x94\x68\xba\xec\xba\xf1\x85\x8d\xc3\xc7\x80\x66\x9f\x9e\xfb\x77\x7c\x2f\xc9\xd4\xd2\xb9\xc6\x52\x0e\x5f\x4e\x4e\xcf\xba\x71\x10\xca\xfc\xff\x44\x3a\xe4\x41\x6c\x62\xf0\x12\xef\x7b\x94\x7d\x59\x31\xe8\xeb\xfe\x7d\xe9\xba\x75\xe1\xbe\x83\x7b\x5d\x51\x4e\x0c\x3e\x5e\xc9\xb1\xfe\x04\xbc\xbf\xa3\xc9\x7a\x38\x1d\x2f\x86\x27\x5f\xbf\x71\x54\x4b\xab\x55\xa6\xd0\xc5\x3f\x53\x92\x26\x0a\x7a\x2f\xb3\x92\xb5\xbc\x8d\x2b\x1a\x93\x73\x90\xa3\x47\xaa\x94\x41\x0e\x51\x65\x25\xcc\x46\x0b\x88\x4d\x44\xa2\x20\xab\xb1\x37\xc2\xb5\x6d\xd3\x53\x6b\x24\x3e\x97\x6a\xef\x8d\x07\xc2\xc7\xc0\x9d\xe0\xcb\xab\x65\x88\x8c\x4f\x0e\x82\xc9\x91\x40\x0a\x57\x63\xa6\x0a\x95\xc5\xa2\x09\xdc\x71\xe4\x07\x97\xc6\x51\x3c\x06\x45\x5c\x2a\x6e\xd6\x14\x4d\xa4\xe3\x85\xf4\xf2\x92\x87\x1b\xc5\x63\x56\x07\x04\xf1\x86\x70\xd1\x57\x4e\x60\xa4\x75\xd7\xd8\x41\xfd\xe8\x5d\xdb\xed\xb6\xb7\x3e\xd6\x36\xe4\x37\x24\x95\xe6\x84\x2e\xb0\xe6\x51\x44\x55\xb6\xdc\x9d\x5c\x2d\xc9\xab\x2c\x68\xc9\x61\xde\xad\x21\xb3\xa6\x50\xdb\xd0\x4b\x7d\x8e\x10\x3e\xf2\x16\x0c\xf6\x62\x0e\xbb\x05\x14\x0c\xbd\x5f\x4d\xa6\xb3\xeb\xab\x6e\x0a\xfc\xb6\x5c\x5d\xff\x9c\xcd\x27\x9c\xd0\x93\xe2\x89\x57\x71\x15\x9f\x24\x29\xb9\xe1\x38\x13\xf1\x27\x00\x00\xff\xff\x2e\x7b\x74\x64\x73\x04\x00\x00")

func docsUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_docsUsageTxt,
		"docs/usage.txt",
	)
}

func docsUsageTxt() (*asset, error) {
	bytes, err := docsUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/usage.txt", size: 1139, mode: os.FileMode(436), modTime: time.Unix(1444083222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/usage.txt": docsUsageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": {nil, map[string]*bintree{
		"usage.txt": {docsUsageTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
